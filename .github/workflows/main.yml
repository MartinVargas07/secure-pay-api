name: SecurePay API - CI/CD Pipeline Profesional

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # ===================================================================
  # JOB 1: LINT & FORMAT - La primera puerta de calidad
  # ===================================================================
  lint-and-format:
    name: 1. Calidad de Codigo (Lint & Format)
    runs-on: ubuntu-latest
    steps:
      - name: Clonar el repositorio
        uses: actions/checkout@v4

      - name: Configurar Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Instalar dependencias de calidad
        run: pip install black flake8

      - name: Verificar formateo con Black
        # --check falla si el c√≥digo no est√° formateado, sin modificarlo.
        run: black --check .

      - name: Verificar errores de linting con Flake8
        run: flake8 .

  # ===================================================================
  # JOB 2: RUN TESTS - La segunda puerta de calidad
  # ===================================================================
  run-tests:
    name: 2. Pruebas y Cobertura
    needs: lint-and-format # Se ejecuta solo si el anterior es exitoso
    runs-on: ubuntu-latest
    env: # <-- ESTA ES LA SECCI√ìN A√ëADIDA Y CORREGIDA
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      ADMIN_API_KEY: ${{ secrets.ADMIN_API_KEY }}
    steps:
      - name: Clonar el repositorio
        uses: actions/checkout@v4

      - name: Configurar Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Instalar dependencias de la aplicaci√≥n
        run: pip install -r requirements.txt

      - name: Ejecutar pruebas y medir cobertura
        # --cov-fail-under=90: Falla si la cobertura de pruebas es menor al 90%
        run: pytest --cov=core --cov=db --cov=services --cov=api --cov-fail-under=90
  
  # ===================================================================
  # JOB 3: SECURITY SCANS - El coraz√≥n de DevSecOps
  # ===================================================================
  security-scans:
    name: 3. Escaneos de Seguridad (SAST & SCA)
    needs: run-tests # Se ejecuta solo si las pruebas pasan
    runs-on: ubuntu-latest
    steps:
      - name: Clonar el repositorio
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # SonarCloud necesita el historial completo para un an√°lisis preciso

      - name: Analisis de Codigo con SonarCloud (SAST)
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      
      - name: Login a GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Construir Imagen Docker (usando multi-etapa)
        id: build_image
        uses: docker/build-push-action@v5
        with:
          context: .
          # Solo la construimos, no la empujamos a√∫n.
          # La acci√≥n de Trivy puede escanear im√°genes locales.
          load: true 
          tags: local/secure-pay-api:${{ github.sha }}

      - name: Escanear Imagen con Trivy (SCA)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'local/secure-pay-api:${{ github.sha }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

  # ===================================================================
  # JOB 4 y 5: DEPLOYMENT - Simulaci√≥n de Entrega Continua
  # ===================================================================
  deploy-staging:
    name: 4. Despliegue a Staging
    needs: security-scans
    runs-on: ubuntu-latest
    steps:
      - name: Simular despliegue a Staging
        run: |
          echo "üöÄ Desplegando a entorno de Staging..."
          echo "Artefacto validado exitosamente."

  deploy-production:
    name: 5. Despliegue a Produccion
    needs: deploy-staging
    runs-on: ubuntu-latest
    
    environment:
      name: Production
      url: https://secure-pay-api.example.com

    steps:
      - name: Simular despliegue a Produccion
        run: |
          echo "‚úÖ Aprobacion manual recibida."
          echo "üöÄ Desplegando a entorno de PRODUCCION..."
          echo "üéâ ¬°Despliegue completado!"
